
import streamlit as st
import pandas as pd
import os
import datetime

CSV_FILE = "veriler.csv"

st.set_page_config(page_title="TYT Soru Takip", layout="wide")

st.markdown(
    "<h1 style='text-align: center; color: white;'>TYT Soru Takip ve Analiz</h1>",
    unsafe_allow_html=True
)

menu = ["Analiz", "Soru Ekle", "KayÄ±t Sil", "Soru NotlarÄ±", "Ä°ÅŸaretli Sorular"]
secenek = st.sidebar.selectbox("MenÃ¼", menu)

if secenek == "Soru Ekle":
    st.header("Yeni Soru KaydÄ±")
    col1, col2 = st.columns(2)
    with col1:
        ders = st.selectbox("Ders", ["TÃ¼rkÃ§e", "Matematik", "Fen", "Sosyal"])
        konu = st.text_input("Konu")
        dogru = st.checkbox("DoÄŸru")
        sure_dahil = st.checkbox("SÃ¼reyi ortalamaya dahil et", value=True)
    with col2:
        soru_no = st.number_input("Soru No", min_value=1, step=1)
        dakika = st.number_input("Dakika", min_value=0, step=1)
        saniye = st.number_input("Saniye", min_value=0, max_value=59, step=1)
        zorlanma = st.slider("Zorluk (0: Ã‡ok Kolay - 4: Ã‡ok Zor)", 0, 4, 2)
        isaretli = st.checkbox("Soruyu iÅŸaretle")
    aciklama = st.text_area("AÃ§Ä±klama (varsa)")
    soru_notu = st.text_area("Soru Notu (varsa)")

    if st.button("Kaydet"):
        toplam_sure = dakika * 60 + saniye
        yeni_veri = pd.DataFrame([{
            "Tarih": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "Ders": ders,
            "Konu": konu,
            "Soru No": soru_no,
            "DoÄŸru": dogru,
            "SÃ¼re": toplam_sure,
            "Zorluk": zorlanma,
            "Ä°ÅŸaretli": isaretli,
            "AÃ§Ä±klama": aciklama,
            "Soru Notu": soru_notu,
            "SÃ¼re Dahil": sure_dahil
        }])
        if os.path.exists(CSV_FILE):
            df = pd.read_csv(CSV_FILE)
            df = pd.concat([df, yeni_veri], ignore_index=True)
        else:
            df = yeni_veri
        df.to_csv(CSV_FILE, index=False)
        st.success("KayÄ±t baÅŸarÄ±yla eklendi.")

elif secenek == "Analiz":
    st.header("Analiz EkranÄ±")
    if os.path.exists(CSV_FILE):
        df = pd.read_csv(CSV_FILE)
        filtre_ders = st.multiselect("Ders SeÃ§", df["Ders"].unique())
        filtre_konu = st.multiselect("Konu SeÃ§", df["Konu"].unique())
        filtre_zorluk = st.multiselect("Zorluk SeÃ§ (0-4)", sorted(df["Zorluk"].unique()))

        if filtre_ders:
            df = df[df["Ders"].isin(filtre_ders)]
        if filtre_konu:
            df = df[df["Konu"].isin(filtre_konu)]
        if filtre_zorluk:
            df = df[df["Zorluk"].isin(filtre_zorluk)]

        toplam_soru = len(df)
        dogru_sayi = df["DoÄŸru"].sum()
        if "SÃ¼re Dahil" in df.columns:
            ort_sure = df[df["SÃ¼re Dahil"] == True]["SÃ¼re"].mean()
        else:
            ort_sure = df["SÃ¼re"].mean()
        ort_zorluk = df["Zorluk"].mean()

        st.metric("Toplam Soru", toplam_soru)
        st.metric("DoÄŸru SayÄ±sÄ±", int(dogru_sayi))
        st.metric("Ortalama SÃ¼re (sn)", f"{ort_sure:.2f}")
        st.metric("Ortalama Zorluk", f"{ort_zorluk:.2f}")

        st.dataframe(df)
    else:
        st.warning("HenÃ¼z veri eklenmemiÅŸ.")

elif secenek == "KayÄ±t Sil":
    st.header("KayÄ±t Silme")
    if os.path.exists(CSV_FILE):
        df = pd.read_csv(CSV_FILE)
        st.dataframe(df.tail(10))
        sil_id = st.number_input("Silinecek SÄ±ra No", min_value=0, max_value=len(df)-1, step=1)
        if st.button("Sil"):
            df = df.drop(index=sil_id).reset_index(drop=True)
            df.to_csv(CSV_FILE, index=False)
            st.success("KayÄ±t silindi.")
    else:
        st.warning("Veri dosyasÄ± bulunamadÄ±.")

elif secenek == "Soru NotlarÄ±":
    st.header("Soru NotlarÄ±")
    if os.path.exists(CSV_FILE):
        df = pd.read_csv(CSV_FILE)
        df = df[df["Soru Notu"].notna() & (df["Soru Notu"] != "")]
        filtre_ders = st.multiselect("Ders Filtrele", df["Ders"].unique())
        filtre_konu = st.multiselect("Konu Filtrele", df["Konu"].unique())

        if filtre_ders:
            df = df[df["Ders"].isin(filtre_ders)]
        if filtre_konu:
            df = df[df["Konu"].isin(filtre_konu)]

        for ders in df["Ders"].unique():
            ders_df = df[df["Ders"] == ders]
            st.subheader(f"ðŸ“˜ {ders}")
            for konu in ders_df["Konu"].unique():
                konu_df = ders_df[ders_df["Konu"] == konu]
                st.markdown(f"**ðŸ”¹ {konu}**")
                for _, row in konu_df.iterrows():
                    st.markdown(f"- Soru {int(row['Soru No'])}: {row['Soru Notu']}")
    else:
        st.warning("HenÃ¼z not alÄ±nmÄ±ÅŸ soru bulunamadÄ±.")

elif secenek == "Ä°ÅŸaretli Sorular":
    st.header("Ä°ÅŸaretli Sorular")
    if os.path.exists(CSV_FILE):
        df = pd.read_csv(CSV_FILE)
        if "Ä°ÅŸaretli" in df.columns and True in df["Ä°ÅŸaretli"].unique():
            for ders in df["Ders"].unique():
                alt_df = df[(df["Ders"] == ders) & (df["Ä°ÅŸaretli"] == True)]
                if not alt_df.empty:
                    st.subheader(ders)
                    sorular = alt_df["Soru No"].tolist()
                    st.write(f"Ä°ÅŸaretli Sorular: {', '.join(map(str, sorular))}")
    else:
        st.warning("Veri dosyasÄ± bulunamadÄ±.")
